## @section Nautobot Service Parameters

## Nautobot service parameters
##
service:
  ## @param service.type nautobot service type
  ##
  type: ClusterIP
  ## @param service.port nautobot service HTTP port
  ##
  port: 8080
  ## @param service.httpsPort nautobot service HTTPS port
  ##
  httpsPort: 8443
  ## Node ports to expose
  ## @param service.nodePorts.http Node port for HTTP
  ## @param service.nodePorts.https Node port for HTTPS
  ## NOTE: choose port between <30000-32767>
  ##
  nodePorts:
    http:
    https:
  ## @param service.clusterIP nautobot service Cluster IP
  ## e.g.:
  ## clusterIP: None
  ##
  clusterIP:
  ## @param service.loadBalancerIP nautobot service Load Balancer IP
  ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-loadbalancer
  ##
  loadBalancerIP:
  ## @param service.loadBalancerSourceRanges nautobot service Load Balancer sources
  ## ref: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/#restrict-access-for-loadbalancer-service
  ## e.g:
  ## loadBalancerSourceRanges:
  ##   - 10.10.10.0/24
  ##
  loadBalancerSourceRanges: []
  ## @param service.externalTrafficPolicy nautobot service external traffic policy
  ## ref http://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip
  ##
  externalTrafficPolicy: Cluster
  ## @param service.annotations Additional custom annotations for nautobot service
  ##
  annotations: {}

## @section Nautobot Parameters

## Nautobot Server
##
nautobot:
  ## Nautobot image
  ## ref: https://hub.docker.com/r/bitnami/redis/tags/
  ## @param image.registry nautobot image registry
  ## @param image.repository nautobot image repository
  ## @param image.tag nautobot image tag (immutable tags are recommended)
  ## @param image.pullPolicy nautobot image pull policy
  ## @param image.pullSecrets nautobot image pull secrets
  ## @param image.debug Enable image debug mode
  ##
  image:
    registry: ghcr.io
    repository: nautobot/nautobot
    tag: 1.1.2
    ## Specify a imagePullPolicy
    ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
    ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
    ##
    pullPolicy: IfNotPresent
    ## Optionally specify an array of imagePullSecrets.
    ## Secrets must be manually created in the namespace.
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    ## e.g:
    ## pullSecrets:
    ##   - myRegistryKeySecretName
    ##
    pullSecrets: []
    ## Enable debug mode
    ##
    debug: false
  ## @param nautobot.replicaCount Number of nautobot replicas to deploy
  ##
  replicaCount: 2
  ## Configure extra options for nautobot containers' liveness and readiness probes
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
  ## @param nautobot.livenessProbe.enabled Enable livenessProbe on nautobot nodes
  ## @param nautobot.livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
  ## @param nautobot.livenessProbe.periodSeconds Period seconds for livenessProbe
  ## @param nautobot.livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
  ## @param nautobot.livenessProbe.failureThreshold Failure threshold for livenessProbe
  ## @param nautobot.livenessProbe.successThreshold Success threshold for livenessProbe
  ##
  livenessProbe:
    enabled: true
    httpGet:
      path: "/health/"
      port: "http"
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1
  ## @param nautobot.readinessProbe.enabled Enable readinessProbe on nautobot nodes
  ## @param nautobot.readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe
  ## @param nautobot.readinessProbe.periodSeconds Period seconds for readinessProbe
  ## @param nautobot.readinessProbe.timeoutSeconds Timeout seconds for readinessProbe
  ## @param nautobot.readinessProbe.failureThreshold Failure threshold for readinessProbe
  ## @param nautobot.readinessProbe.successThreshold Success threshold for readinessProbe
  ##
  readinessProbe:
    enabled: true
    httpGet:
      path: "/health/"
      port: "http"
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1
  ## @param nautobot.customLivenessProbe Custom livenessProbe that overrides the default one
  ##
  customLivenessProbe: {}
  ## @param nautobot.customReadinessProbe Custom readinessProbe that overrides the default one
  ##
  customReadinessProbe: {}
  ## nautobot resource requests and limits
  ## ref: http://kubernetes.io/docs/user-guide/compute-resources/
  ## @param nautobot.resources.limits The resources limits for the nautobot containers
  ## @param nautobot.resources.requests The requested resources for the nautobot containers
  ##
  resources:
    limits:
      cpu: "1"
      memory: "2Gi"
    requests:
      cpu: "0.7"
      memory: "784Mi"
  ## Configure Pods Security Context
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
  ## @param nautobot.podSecurityContext.enabled Enabled nautobot pods' Security Context
  ## @param nautobot.podSecurityContext.fsGroup Set nautobot pod's Security Context fsGroup
  ##
  podSecurityContext:
    enabled: true
    fsGroup: 999
  ## Configure Container Security Context
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
  ## @param nautobot.containerSecurityContext.enabled Enabled nautobot containers' Security Context
  ## @param nautobot.containerSecurityContext.runAsUser Set nautobot containers' Security Context runAsUser
  ##
  containerSecurityContext:
    enabled: true
    runAsUser: 999
    runAsGroup: 999

  ## @param nautobot.existingConfigmap The name of an existing ConfigMap with your custom configuration for nautobot
  ##
  existingConfigmap:
  ## @param nautobot.command Override default container command (useful when using custom images)
  ##
  command: []
  ## @param nautobot.args Override default container args (useful when using custom images)
  ##
  args:

  ## @param nautobot.hostAliases nautobot pods host aliases
  ## https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/
  ##
  hostAliases: []
  ## @param nautobot.podLabels Extra labels for nautobot pods
  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
  ##
  podLabels: {}
  ## @param nautobot.podAnnotations Annotations for nautobot pods
  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
  ##
  podAnnotations: {}
  ## @param nautobot.podAffinityPreset Pod affinity preset. Ignored if `nautobot.affinity` is set. Allowed values: `soft` or `hard`
  ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
  ##
  podAffinityPreset: ""
  ## @param nautobot.podAntiAffinityPreset Pod anti-affinity preset. Ignored if `nautobot.affinity` is set. Allowed values: `soft` or `hard`
  ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
  ##
  podAntiAffinityPreset: soft
  ## Node nautobot.affinity preset
  ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity
  ##
  nodeAffinityPreset:
    ## @param nautobot.nodeAffinityPreset.type Node affinity preset type. Ignored if `nautobot.affinity` is set. Allowed values: `soft` or `hard`
    ##
    type: ""
    ## @param nautobot.nodeAffinityPreset.key Node label key to match. Ignored if `nautobot.affinity` is set
    ##
    key: ""
    ## @param nautobot.nodeAffinityPreset.values Node label values to match. Ignored if `nautobot.affinity` is set
    ## E.g.
    ## values:
    ##   - e2e-az1
    ##   - e2e-az2
    ##
    values: []
  ## @param nautobot.affinity Affinity for nautobot pods assignment
  ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  ## NOTE: `nautobot.podAffinityPreset`, `nautobot.podAntiAffinityPreset`, and `nautobot.nodeAffinityPreset` will be ignored when it's set
  ##
  affinity: {}
  ## @param nautobot.nodeSelector Node labels for nautobot pods assignment
  ## ref: https://kubernetes.io/docs/user-guide/node-selection/
  ##
  nodeSelector: {}
  ## @param nautobot.tolerations Tolerations for nautobot pods assignment
  ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  ##
  tolerations: []
  ## @param nautobot.updateStrategy.type nautobot statefulset strategy type
  ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#update-strategies
  ##
  updateStrategy:
    ## StrategyType
    ## Can be set to RollingUpdate or OnDelete
    ##
    type: RollingUpdate
  ## @param nautobot.priorityClassName nautobot pods' priorityClassName
  ##
  priorityClassName: ""
  ## @param nautobot.lifecycleHooks for the nautobot container(s) to automate configuration before or after startup
  ##
  lifecycleHooks: {}
  ## @param nautobot.extraEnvVars Array with extra environment variables to add to nautobot nodes
  ## e.g:
  ## extraEnvVars:
  ##   - name: FOO
  ##     value: "bar"
  ##
  extraEnvVars: []
  ## @param nautobot.extraEnvVarsCM Name of existing ConfigMap containing extra env vars for nautobot nodes
  ##
  extraEnvVarsCM:
  ## @param nautobot.extraEnvVarsSecret Name of existing Secret containing extra env vars for nautobot nodes
  ##
  extraEnvVarsSecret:
  ## @param nautobot.extraVolumes Optionally specify extra list of additional volumes for the nautobot pod(s)
  ##
  extraVolumes: []
  ## @param nautobot.extraVolumeMounts Optionally specify extra list of additional volumeMounts for the nautobot container(s)
  ##
  extraVolumeMounts: []
  ## @param nautobot.sidecars Add additional sidecar containers to the nautobot pod(s)
  ## e.g:
  ## sidecars:
  ##   - name: your-image-name
  ##     image: your-image
  ##     imagePullPolicy: Always
  ##     ports:
  ##       - name: portname
  ##         containerPort: 1234
  ##
  sidecars: {}
  ## @param nautobot.initContainers Add additional init containers to the nautobot pod(s)
  ## ref: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
  ## e.g:
  ## initContainers:
  ##  - name: your-image-name
  ##    image: your-image
  ##    imagePullPolicy: Always
  ##    command: ['sh', '-c', 'echo "hello world"']
  ##
  initContainers: {}
  envVars:  # https://nautobot.readthedocs.io/en/stable/configuration/required-settings/
    allowedHosts: "*"  # NAUTOBOT_ALLOWED_HOSTS space separated list of allowed hosts
    dbEngine: "django.db.backends.postgresql"  # NAUTOBOT_DB_ENGINE
    dbHost: "postgres"  # NAUTOBOT_DB_HOST
    dbName: "nautobot"  # NAUTOBOT_DB_NAME
    dbPassword: ""  # NAUTOBOT_DB_PASSWORD defaults to postgresql.postgresqlPassword
    dbPort: ""  # NAUTOBOT_DB_PORT
    dbTimeout: "300"  # NAUTOBOT_DB_TIMEOUT
    dbUser: "nautobot"  # NAUTOBOT_DB_USER
    debug: "False"  # NAUTOBOT_DEBUG
    logLevel: "INFO"
    metrics: "True" # NAUTOBOT_METRICS_ENABLED Should really use .metrics.enabled instead of this
    redisHost: ""  # NAUTOBOT_REDIS_HOST
    redisPassword: ""  # NAUTOBOT_REDIS_PASSWORD
    redisPort: "6379"  # NAUTOBOT_REDIS_PORT
    redisUsername: ""  # NAUTOBOT_REDIS_USERNAME
    redisSSL: "False"  # NAUTOBOT_REDIS_SSL
    # secretKey: ""  # NAUTOBOT_SECRET_KEY
    # extraVars are env vars common to all Nautobot containers (rq worker, celery, and nautobot)
    # extraVars:  # https://nautobot.readthedocs.io/en/stable/configuration/optional-settings/
    #   - name: "NAUTOBOT_BANNER_TOP"
    #     value: "Nautobot Helm Chart"

## Nautobot RQ Worker
##
rqWorker:
  ## @param worker.replicaCount Number of nautobot replicas to deploy
  ##
  replicaCount: 2
  ## Configure extra options for nautobot containers' liveness and readiness probes
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
  ## @param worker.livenessProbe.enabled Enable livenessProbe on nautobot nodes
  ## @param worker.livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
  ## @param worker.livenessProbe.periodSeconds Period seconds for livenessProbe
  ## @param worker.livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
  ## @param worker.livenessProbe.failureThreshold Failure threshold for livenessProbe
  ## @param worker.livenessProbe.successThreshold Success threshold for livenessProbe
  ##
  livenessProbe:
    enabled: true
    httpGet:
      path: "/"
      port: 8001
    initialDelaySeconds: 3
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1
  ## @param worker.readinessProbe.enabled Enable readinessProbe on nautobot nodes
  ## @param worker.readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe
  ## @param worker.readinessProbe.periodSeconds Period seconds for readinessProbe
  ## @param worker.readinessProbe.timeoutSeconds Timeout seconds for readinessProbe
  ## @param worker.readinessProbe.failureThreshold Failure threshold for readinessProbe
  ## @param worker.readinessProbe.successThreshold Success threshold for readinessProbe
  ##
  readinessProbe:
    enabled: true
    httpGet:
      path: "/"
      port: 8001
    initialDelaySeconds: 3
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1
  ## @param worker.customLivenessProbe Custom livenessProbe that overrides the default one
  ##
  customLivenessProbe: {}
  ## @param worker.customReadinessProbe Custom readinessProbe that overrides the default one
  ##
  customReadinessProbe: {}
  ## nautobot resource requests and limits
  ## ref: http://kubernetes.io/docs/user-guide/compute-resources/
  ## @param worker.resources.limits The resources limits for the nautobot containers
  ## @param worker.resources.requests The requested resources for the nautobot containers
  ##
  resources:
    limits:
      cpu: "1"
      memory: "1Gi"
    requests:
      cpu: ".1"
      memory: "256Mi"
  ## Configure Pods Security Context
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
  ## @param worker.podSecurityContext.enabled Enabled nautobot pods' Security Context
  ## @param worker.podSecurityContext.fsGroup Set nautobot pod's Security Context fsGroup
  ##
  podSecurityContext:
    enabled: true
    fsGroup: 999
  ## Configure Container Security Context
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
  ## @param worker.containerSecurityContext.enabled Enabled nautobot containers' Security Context
  ## @param worker.containerSecurityContext.runAsUser Set nautobot containers' Security Context runAsUser
  ##
  containerSecurityContext:
    enabled: true
    runAsUser: 999

  ## @param worker.existingConfigmap The name of an existing ConfigMap with your custom configuration for nautobot
  ##
  existingConfigmap:
  ## @param worker.command Override default container command (useful when using custom images)
  ##
  command:
    - "nautobot-server"
    - "rqworker"
  ## @param worker.args Override default container args (useful when using custom images)
  ##
  args: []
  ## @param worker.hostAliases nautobot pods host aliases
  ## https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/
  ##
  hostAliases: []
  ## @param worker.podLabels Extra labels for nautobot pods
  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
  ##
  podLabels: {}
  ## @param worker.podAnnotations Annotations for nautobot pods
  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
  ##
  podAnnotations: {}
  ## @param worker.podAffinityPreset Pod affinity preset. Ignored if `worker.affinity` is set. Allowed values: `soft` or `hard`
  ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
  ##
  podAffinityPreset: ""
  ## @param worker.podAntiAffinityPreset Pod anti-affinity preset. Ignored if `worker.affinity` is set. Allowed values: `soft` or `hard`
  ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
  ##
  podAntiAffinityPreset: soft
  ## Node worker.affinity preset
  ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity
  ##
  nodeAffinityPreset:
    ## @param worker.nodeAffinityPreset.type Node affinity preset type. Ignored if `worker.affinity` is set. Allowed values: `soft` or `hard`
    ##
    type: ""
    ## @param worker.nodeAffinityPreset.key Node label key to match. Ignored if `worker.affinity` is set
    ##
    key: ""
    ## @param worker.nodeAffinityPreset.values Node label values to match. Ignored if `worker.affinity` is set
    ## E.g.
    ## values:
    ##   - e2e-az1
    ##   - e2e-az2
    ##
    values: []
  ## @param worker.affinity Affinity for nautobot pods assignment
  ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  ## NOTE: `worker.podAffinityPreset`, `worker.podAntiAffinityPreset`, and `worker.nodeAffinityPreset` will be ignored when it's set
  ##
  affinity: {}
  ## @param worker.nodeSelector Node labels for nautobot pods assignment
  ## ref: https://kubernetes.io/docs/user-guide/node-selection/
  ##
  nodeSelector: {}
  ## @param worker.tolerations Tolerations for nautobot pods assignment
  ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  ##
  tolerations: []
  ## @param worker.updateStrategy.type nautobot statefulset strategy type
  ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#update-strategies
  ##
  updateStrategy:
    ## StrategyType
    ## Can be set to RollingUpdate or OnDelete
    ##
    type: RollingUpdate
  ## @param worker.priorityClassName nautobot pods' priorityClassName
  ##
  priorityClassName: ""
  ## @param worker.lifecycleHooks for the nautobot container(s) to automate configuration before or after startup
  ##
  lifecycleHooks: {}
  ## @param worker.extraEnvVars Array with extra environment variables to add to nautobot nodes
  ## e.g:
  ## extraEnvVars:
  ##   - name: FOO
  ##     value: "bar"
  ##
  extraEnvVars: []
  ## @param worker.extraEnvVarsCM Name of existing ConfigMap containing extra env vars for nautobot nodes
  ##
  extraEnvVarsCM:
  ## @param worker.extraEnvVarsSecret Name of existing Secret containing extra env vars for nautobot nodes
  ##
  extraEnvVarsSecret:
  ## @param worker.extraVolumes Optionally specify extra list of additional volumes for the nautobot pod(s)
  ##
  extraVolumes: []
  ## @param worker.extraVolumeMounts Optionally specify extra list of additional volumeMounts for the nautobot container(s)
  ##
  extraVolumeMounts: []
  ## @param worker.sidecars Add additional sidecar containers to the nautobot pod(s)
  ## e.g:
  ## sidecars:
  ##   - name: your-image-name
  ##     image: your-image
  ##     imagePullPolicy: Always
  ##     ports:
  ##       - name: portname
  ##         containerPort: 1234
  ##
  sidecars: {}
  ## @param worker.initContainers Add additional init containers to the nautobot pod(s)
  ## ref: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
  ## e.g:
  ## initContainers:
  ##  - name: your-image-name
  ##    image: your-image
  ##    imagePullPolicy: Always
  ##    command: ['sh', '-c', 'echo "hello world"']
  ##
  initContainers: {}

## Nautobot Celery Worker
##
celeryWorker:
  ## @param worker.replicaCount Number of nautobot replicas to deploy
  ##
  replicaCount: 2
  ## Configure extra options for nautobot containers' liveness and readiness probes
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
  ## @param worker.livenessProbe.enabled Enable livenessProbe on nautobot nodes
  ## @param worker.livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
  ## @param worker.livenessProbe.periodSeconds Period seconds for livenessProbe
  ## @param worker.livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
  ## @param worker.livenessProbe.failureThreshold Failure threshold for livenessProbe
  ## @param worker.livenessProbe.successThreshold Success threshold for livenessProbe
  ##
  livenessProbe:
    enabled: true
    exec:
      command:
        - "bash"
        - "-c"
        - "nautobot-server celery inspect ping --destination celery@$HOSTNAME"
    initialDelaySeconds: 30
    periodSeconds: 60
    timeoutSeconds: 10
    failureThreshold: 3
    successThreshold: 1
  ## @param worker.readinessProbe.enabled Enable readinessProbe on nautobot nodes
  ## @param worker.readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe
  ## @param worker.readinessProbe.periodSeconds Period seconds for readinessProbe
  ## @param worker.readinessProbe.timeoutSeconds Timeout seconds for readinessProbe
  ## @param worker.readinessProbe.failureThreshold Failure threshold for readinessProbe
  ## @param worker.readinessProbe.successThreshold Success threshold for readinessProbe
  ##
  readinessProbe:
    enabled: true
    exec:
      command:
        - "bash"
        - "-c"
        - "nautobot-server celery inspect ping --destination celery@$HOSTNAME"
    initialDelaySeconds: 30
    periodSeconds: 60
    timeoutSeconds: 10
    failureThreshold: 3
    successThreshold: 1
  ## @param worker.customLivenessProbe Custom livenessProbe that overrides the default one
  ##
  customLivenessProbe: {}
  ## @param worker.customReadinessProbe Custom readinessProbe that overrides the default one
  ##
  customReadinessProbe: {}
  ## nautobot resource requests and limits
  ## ref: http://kubernetes.io/docs/user-guide/compute-resources/
  ## @param worker.resources.limits The resources limits for the nautobot containers
  ## @param worker.resources.requests The requested resources for the nautobot containers
  ##
  resources:
    limits:
      cpu: "1"
      memory: "1Gi"
    requests:
      cpu: ".1"
      memory: "512Mi"
  ## Configure Pods Security Context
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
  ## @param worker.podSecurityContext.enabled Enabled nautobot pods' Security Context
  ## @param worker.podSecurityContext.fsGroup Set nautobot pod's Security Context fsGroup
  ##
  podSecurityContext:
    enabled: true
    fsGroup: 999
  ## Configure Container Security Context
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
  ## @param worker.containerSecurityContext.enabled Enabled nautobot containers' Security Context
  ## @param worker.containerSecurityContext.runAsUser Set nautobot containers' Security Context runAsUser
  ##
  containerSecurityContext:
    enabled: true
    runAsUser: 999

  ## @param worker.existingConfigmap The name of an existing ConfigMap with your custom configuration for nautobot
  ##
  existingConfigmap:
  ## @param worker.command Override default container command (useful when using custom images)
  ##
  command:
    - "nautobot-server"
    - "celery"
    - "worker"
    - "--loglevel"
    - "$(NAUTOBOT_LOG_LEVEL)"
  ## @param worker.args Override default container args (useful when using custom images)
  ##
  args: []
  ## @param worker.hostAliases nautobot pods host aliases
  ## https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/
  ##
  hostAliases: []
  ## @param worker.podLabels Extra labels for nautobot pods
  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
  ##
  podLabels: {}
  ## @param worker.podAnnotations Annotations for nautobot pods
  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
  ##
  podAnnotations: {}
  ## @param worker.podAffinityPreset Pod affinity preset. Ignored if `worker.affinity` is set. Allowed values: `soft` or `hard`
  ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
  ##
  podAffinityPreset: ""
  ## @param worker.podAntiAffinityPreset Pod anti-affinity preset. Ignored if `worker.affinity` is set. Allowed values: `soft` or `hard`
  ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
  ##
  podAntiAffinityPreset: soft
  ## Node worker.affinity preset
  ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity
  ##
  nodeAffinityPreset:
    ## @param worker.nodeAffinityPreset.type Node affinity preset type. Ignored if `worker.affinity` is set. Allowed values: `soft` or `hard`
    ##
    type: ""
    ## @param worker.nodeAffinityPreset.key Node label key to match. Ignored if `worker.affinity` is set
    ##
    key: ""
    ## @param worker.nodeAffinityPreset.values Node label values to match. Ignored if `worker.affinity` is set
    ## E.g.
    ## values:
    ##   - e2e-az1
    ##   - e2e-az2
    ##
    values: []
  ## @param worker.affinity Affinity for nautobot pods assignment
  ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  ## NOTE: `worker.podAffinityPreset`, `worker.podAntiAffinityPreset`, and `worker.nodeAffinityPreset` will be ignored when it's set
  ##
  affinity: {}
  ## @param worker.nodeSelector Node labels for nautobot pods assignment
  ## ref: https://kubernetes.io/docs/user-guide/node-selection/
  ##
  nodeSelector: {}
  ## @param worker.tolerations Tolerations for nautobot pods assignment
  ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  ##
  tolerations: []
  ## @param worker.updateStrategy.type nautobot statefulset strategy type
  ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#update-strategies
  ##
  updateStrategy:
    ## StrategyType
    ## Can be set to RollingUpdate or OnDelete
    ##
    type: RollingUpdate
  ## @param worker.priorityClassName nautobot pods' priorityClassName
  ##
  priorityClassName: ""
  ## @param worker.lifecycleHooks for the nautobot container(s) to automate configuration before or after startup
  ##
  lifecycleHooks: {}
  ## @param worker.extraEnvVars Array with extra environment variables to add to nautobot nodes
  ## e.g:
  ## extraEnvVars:
  ##   - name: FOO
  ##     value: "bar"
  ##
  extraEnvVars: []
  ## @param worker.extraEnvVarsCM Name of existing ConfigMap containing extra env vars for nautobot nodes
  ##
  extraEnvVarsCM:
  ## @param worker.extraEnvVarsSecret Name of existing Secret containing extra env vars for nautobot nodes
  ##
  extraEnvVarsSecret:
  ## @param worker.extraVolumes Optionally specify extra list of additional volumes for the nautobot pod(s)
  ##
  extraVolumes: []
  ## @param worker.extraVolumeMounts Optionally specify extra list of additional volumeMounts for the nautobot container(s)
  ##
  extraVolumeMounts: []
  ## @param worker.sidecars Add additional sidecar containers to the nautobot pod(s)
  ## e.g:
  ## sidecars:
  ##   - name: your-image-name
  ##     image: your-image
  ##     imagePullPolicy: Always
  ##     ports:
  ##       - name: portname
  ##         containerPort: 1234
  ##
  sidecars: {}
  ## @param worker.initContainers Add additional init containers to the nautobot pod(s)
  ## ref: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
  ## e.g:
  ## initContainers:
  ##  - name: your-image-name
  ##    image: your-image
  ##    imagePullPolicy: Always
  ##    command: ['sh', '-c', 'echo "hello world"']
  ##
  initContainers: {}

## 'volumePermissions' init container parameters
## Changes the owner and group of the persistent volume mount point to runAsUser:fsGroup values
##   based on the *podSecurityContext/*containerSecurityContext parameters
##
volumePermissions:
  ## @param volumePermissions.enabled Enable init container that changes the owner/group of the PV mount point to `runAsUser:fsGroup`
  ##
  enabled: false
  ## Bitnami Shell image
  ## ref: https://hub.docker.com/r/bitnami/bitnami-shell/tags/
  ## @param volumePermissions.image.registry Bitnami Shell image registry
  ## @param volumePermissions.image.repository Bitnami Shell image repository
  ## @param volumePermissions.image.tag Bitnami Shell image tag (immutable tags are recommended)
  ## @param volumePermissions.image.pullPolicy Bitnami Shell image pull policy
  ## @param volumePermissions.image.pullSecrets Bitnami Shell image pull secrets
  ##
  image:
    registry: docker.io
    repository: bitnami/bitnami-shell
    tag: "10"
    pullPolicy: Always
    ## Optionally specify an array of imagePullSecrets.
    ## Secrets must be manually created in the namespace.
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    ## e.g:
    ## pullSecrets:
    ##   - myRegistryKeySecretName
    ##
    pullSecrets: []
  ## Init container's resource requests and limits
  ## ref: http://kubernetes.io/docs/user-guide/compute-resources/
  ## @param volumePermissions.resources.limits The resources limits for the init container
  ## @param volumePermissions.resources.requests The requested resources for the init container
  ##
  resources:
    limits: {}
    requests: {}
  ## Init container Container Security Context
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
  ## @param volumePermissions.containerSecurityContext.runAsUser Set init container's Security Context runAsUser
  ## NOTE: when runAsUser is set to special value "auto", init container will try to chown the
  ##   data folder to auto-determined user&group, using commands: `id -u`:`id -G | cut -d" " -f2`
  ##   "auto" is especially useful for OpenShift which has scc with dynamic user ids (and 0 is not allowed)
  ##
  containerSecurityContext:
    runAsUser: 0

## @section Other Parameters

## RBAC configuration
##
rbac:
  ## @param rbac.create Specifies whether RBAC resources should be created
  ##
  create: false

## ServiceAccount configuration
##
serviceAccount:
  ## @param serviceAccount.create Specifies whether a ServiceAccount should be created
  ##
  create: true
  ## @param serviceAccount.name The name of the ServiceAccount to use.
  ## If not set and create is true, a name is generated using the common.names.fullname template
  ##
  name: ""

ingress:
  ## Set to true to enable ingress record generation
  ##
  enabled: false

  ## Set this to true in order to add the corresponding annotations for cert-manager
  ##
  certManager: false

  ## Ingress Path type
  ##
  pathType: ImplementationSpecific

  ## Override API Version (automatically detected if not set)
  ##
  apiVersion:

  ## When the ingress is enabled, a host pointing to this will be created
  ##
  hostname: nautobot.local

  ## The Path to Nautobot. You may need to set this to '/*' in order to use this
  ## with ALB ingress controllers.
  ##
  path: /

  ## Ingress annotations done as key:value pairs
  ## For a full list of possible ingress annotations, please see
  ## ref: https://github.com/kubernetes/ingress-nginx/blob/master/docs/user-guide/nginx-configuration/annotations.md
  ##
  ## If certManager is set to true, annotation kubernetes.io/tls-acme: "true" will automatically be set
  ##
  annotations: {}

  ## Enable TLS configuration for the hostname defined at ingress.hostname parameter
  ## TLS certificates will be retrieved from a TLS secret with name: {{- printf "%s-tls" .Values.ingress.hostname }}
  ## You can use the ingress.secrets parameter to create this TLS secret or relay on cert-manager to create it
  ##
  tls: false

  ## The list of additional hostnames to be covered with this ingress record.
  ## Most likely the hostname above will be enough, but in the event more hosts are needed, this is an array
  ## extraHosts:
  ## - name: nautobot.local
  ##   path: /
  ##

  ## Any additional arbitrary paths that may need to be added to the ingress under the main host.
  ## For example: The ALB ingress controller requires a special rule for handling SSL redirection.
  ## extraPaths:
  ## - path: /*
  ##   backend:
  ##     serviceName: ssl-redirect
  ##     servicePort: use-annotation
  ##

  ## The tls configuration for additional hostnames to be covered with this ingress record.
  ## see: https://kubernetes.io/docs/concepts/services-networking/ingress/#tls
  ## extraTls:
  ## - hosts:
  ##     - nautobot.local
  ##   secretName: nautobot.local-tls
  ##

  ## If you're providing your own certificates, please use this to add the certificates as secrets
  ## key and certificate should start with -----BEGIN CERTIFICATE----- or
  ## -----BEGIN RSA PRIVATE KEY-----
  ##
  ## name should line up with a tlsSecret set further up
  ## If you're using cert-manager, this is unneeded, as it will create the secret for you if it is not set
  ##
  ## It is also possible to create and manage the certificates outside of this helm chart
  ## Please see README.md for more information
  ##
  secrets: []
  ## - name: nautobot.local-tls
  ##   key:
  ##   certificate:
  ##

## Add an horizontal pod autoscaler
## ref: https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/
##
autoscaling:
  enabled: false
  apiVersion: autoscaling/v2beta2
  minReplicas: 2
  maxReplicas: 5
  metrics:
    - type: Resource
      resource:
        name: cpu
        targetAverageUtilization: 80

  # TODO Add Postgres/Redis configuration
postgresql:
  enabled: true
  postgresqlUsername: "nautobot"
  postgresqlDatabase: "nautobot"
  postgresqlPassword: "change-me"

redis:
  enabled: true
  auth:
    enabled: true
    password: "change-me"
